#if PIXYZ_PLUGIN_FOR_UNITY
using UnityEngine;
using UnityEditor.Toolbars;

namespace UnityEditor.PixyzPlugin4Unity.Toolbox
{
	// THIS SCRIPT IS AUTOGENERATED. PLEASE DO NOT MODIFY OR MOVE IT.
	public static class ToolboxMenuItems
	{
		[EditorToolbarElement(id, typeof(SceneView))]
		class MeshToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Mesh";
			protected override string GroupName => "Mesh";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1),
				() => Select(2),
				() => Select(3),
				() => Select(4),
				() => Select(5)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.ConformNormals),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.FlipNormals),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.RepairMesh),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.RemoveZFighting),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.CreateNormals),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.BakeAmbientOcclusion)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Conform Normals", "Flip Normals", "Repair", "Remove Z-Fighting", "Create Normals (smoothness)", "Bake Ambient Occlusion" };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class OptimizeToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Optimize";
			protected override string GroupName => "Optimize";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1),
				() => Select(2),
				() => Select(3)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.Decimate),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.RemoveOccluded),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.RemoveHoles),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.BakeMaterials)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Decimate", "Remove Occluded", "Remove Holes", "Bake Materials" };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class RemeshingToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Remeshing";
			protected override string GroupName => "Remeshing";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1),
				() => Select(2)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.Retopologize),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.BakeImpostor),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.GenerateBillboard)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Retopologize", "Create Impostor", "Create Billboard" };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class HierarchyToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Hierarchy";
			protected override string GroupName => "Hierarchy";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1),
				() => Select(2)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.ExplodeSubmeshes),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.Merge),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.ReplaceBy)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Explode", "Merge", "Replace by..." };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class TransformToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Transform";
			protected override string GroupName => "Transform";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1),
				() => Select(2)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.MovePivot),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.SnapToGround),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.CenterToOrigin)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Move Pivot", "Snap To Ground", "Center to Origin" };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class UVsToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "UVs";
			protected override string GroupName => "UVs";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.CreateUVs),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.CreateLightmapUVs)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Create UVs", "Create UVs for Lightmaps" };
			protected override string[] ActionNames => m_ActionNames;

		}
		[EditorToolbarElement(id, typeof(SceneView))]
		class CollidersToggle : PixyzEditorToolbarDropdown, IAccessContainerWindow
		{
			public const string id = "Colliders";
			protected override string GroupName => "Colliders";
			protected override GenericMenu.MenuFunction[] MenuFunctions => new GenericMenu.MenuFunction[] {
				() => Select(0),
				() => Select(1)
			};
			private readonly System.Type[] m_Actions = new System.Type[] {
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.CreateCollider),
				typeof(UnityEditor.PixyzPlugin4Unity.Actions.RemoveColliders)
			};
			protected override System.Type[] Actions => m_Actions;

			private readonly string[] m_ActionNames = new string[] { "Create Collider", "Remove Colliders" };
			protected override string[] ActionNames => m_ActionNames;

		}
	}
}
#endif